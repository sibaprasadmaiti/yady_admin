import { Component, OnInit, ViewContainerRef, Renderer2 , ElementRef } from '@angular/core';
import {ApiServiceService} from '../../services/api-service/api-service.service';
import { RouterModule, Router, ActivatedRoute } from '@angular/router';
import { Ng4LoadingSpinnerService } from 'ng4-loading-spinner';
import { ToastrService } from 'ngx-toastr';
import {MatSnackBar} from '@angular/material';
import { FormBuilder, FormGroup, Validators, AbstractControl, ValidatorFn, FormControl} from '@angular/forms';
import { ErrorStateMatcher } from '@angular/material/core';

@Component({
  selector: 'app-sub-category-add',
  templateUrl: './sub-category-add.component.html',
  styleUrls: ['./sub-category-add.component.scss']
})
export class SubCategoryAddComponent implements OnInit {
	
	addForm: FormGroup;
	logtoken = localStorage.getItem('LoginToken');
	addcontent: any;
	original_pic = '';
	file: any;
	public cat_id: any;
	category_id;

  constructor(private route: ActivatedRoute, public adminservice: ApiServiceService,
    private router: Router,
    private spinnerService: Ng4LoadingSpinnerService,
    public toastr: ToastrService,
    public snackBar: MatSnackBar,
    public  vcr: ViewContainerRef,
    public formbuilder: FormBuilder, private renderer:Renderer2, private el: ElementRef) { 
		this.addForm = formbuilder.group({
			sub_category_name: ['', Validators.compose([Validators.required])],
			category_id: [''],
		});
	}

  ngOnInit() {
	this.route.params.subscribe(params => {
		this.cat_id = params.cat_id;
	});
	this.addForm.patchValue({
		category_id: this.cat_id
	});
  }
  
  addData() {
	  this.spinnerService.show();
    const addcontent = this.addForm.value;
	//console.log('<<file>>>', this.file); return false;
    const  form_data = new FormData();
    form_data.append('sub_category_name', addcontent.sub_category_name);
    form_data.append('category_id', addcontent.category_id);
    if (this.file) { form_data.append('sub_category_image', this.file); }

    this.adminservice.HttpPostReq(`admin/addSubCategory?token=${this.logtoken}`, form_data, true)
    .then(
      (response: any) => {
       this.spinnerService.hide();
       this.toastr.success(response.message);
       this.router.navigateByUrl('/main/sub-category-list/'+this.cat_id);
      },
     (error) => {
      this.spinnerService.hide();
      this.toastr.error('Internal server error');
      this.snackBar.open('Internal server error', 'End now', {
        duration: 5000,
      });
     }
   );
  }
  
  onFileChoose(event) {
    if (!event.target.files.length) { return; }
    // tslint:disable-next-line:prefer-const
    let file = event.target.files[0];
    // let kb = Math.round((file.size / 1024));
    /*if (kb > (3 * 1024)){
      this.toast.showError("File size too big, please select under 3MB");
      return;
    }*/

    this.file = file;
    // console.log('this.file', this.file);
    // const reader = new FileReader();
    /*reader.onload = e => {
      // console.log(e.target.result)
      this.original_pic = e.target.result.toString(); // reader.result.toString()
    };*/

   // reader.readAsDataURL(this.file);
  }
  
  addfield()  {
    console.log('function triggered');
    const div = this.renderer.createElement('div');
    const input = this.renderer.createElement('input');
	console.log(input);

    this.renderer.appendChild(div, input);

    this.renderer.addClass(div, 'col-md-6');
    this.renderer.addClass(div, 'col-sm-6');
    this.renderer.addClass(div, 'col-xs-12');

    console.log('cross passes the code');
    this.renderer.addClass(input, 'form-control');
    this.renderer.addClass(input, 'col-md-7');
    this.renderer.addClass(input, 'col-xs-12');

    const textboxes = document.getElementById('textboxes');

    this.renderer.appendChild(textboxes, div);
  }

}
